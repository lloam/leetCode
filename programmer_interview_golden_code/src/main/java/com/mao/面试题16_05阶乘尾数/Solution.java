package com.mao.面试题16_05阶乘尾数;

/**
 * Author: 但愿人长久
 * Date: 2021/8/26 17:30
 * Description: 设计一个算法，算出 n 阶乘有多少个尾随零。
 */
public class Solution {


    /**
     * 解题思路：
     * 1、那么 n 过大时，从 1 遍历到 n, 那么会超时,因此我们修改下规律
     *
     *         n! = 1 * 2 * 3 * 4 * (1 * 5) * ... * (2 * 5) * ... * (3 * 5) ...
     *         我们发现，
     *         每隔 5 个数就会出现 一个 5，因此我们只需要通过 n / 5 来计算存在存在多少个 5 个数，那么就对应的存在多少个 5
     *         但是，我们也会发现
     *         每隔 25 个数会出现 一个 25， 而 25 存在 两个 5，我们上面只计算了 25 的一个 5，因此我们需要 n / 25 来计算存在多少个 25，加上它遗漏的 5
     *         同时，我们还会发现
     *         每隔 125 个数会出现一个 125，而 125 存在 三个 5，我们上面只计算了 125 的两个 5，因此我们需要 n / 125 来计算存在多少个 125，加上它遗漏的 5
     *         ...
     *
     *         因此我们 count = n / 5 + n / 25 + n / 125 + ...
     *         最终分母可能过大溢出，上面的式子可以进行转换
     *
     *         count = n / 5 + n / 5 / 5 + n / 5 / 5 / 5 + ...
     *         因此，我们这样进行循环
     *         n /= 5;
     *         count += n;
     *         这样，第一次加上的就是 每隔 5 个数的 5 的个数，第二次加上的就是 每隔 25 个数的 5 的个数 ...
     * 作者：liu-yu-x3
     * 链接：https://leetcode-cn.com/problems/factorial-zeros-lcci/solution/zhai-zi-ping-lun-qu-suan-tou-wang-bazuo-zhe-de-dai/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     * @param n     n 阶乘
     * @return
     */
    public int trailingZeroes(int n) {

        // 尾随 0 的个数，也就是结果
        int count = 0;

        // 当 n 不能再大于 5 时退出循环
        while (n >= 5) {

            n /= 5;

            count += n;
        }

        return count;
    }
}
